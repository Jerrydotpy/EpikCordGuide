{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EpikCord \u00b6 Epikcord.py is an API wrapper for the Discord API, which allows you to make Discord Bots. This is an unofficial guide to this Python Wrapper. Using this module, you can easily create Discord Bots with Python. Pages \u00b6 Here are a few pages to help you get started: Installing Epikcord.py Creating your first bot Links \u00b6 Discord Server Documentation Github Repo PyPi","title":"Overiew"},{"location":"#welcome-to-epikcord","text":"Epikcord.py is an API wrapper for the Discord API, which allows you to make Discord Bots. This is an unofficial guide to this Python Wrapper. Using this module, you can easily create Discord Bots with Python.","title":"Welcome to EpikCord"},{"location":"#pages","text":"Here are a few pages to help you get started: Installing Epikcord.py Creating your first bot","title":"Pages"},{"location":"#links","text":"Discord Server Documentation Github Repo PyPi","title":"Links"},{"location":"contributing/","text":"Contributing to EpikCord.py \u00b6 First off, thanks for taking the time to contribute. It makes the library substantially better. Info The following is a set of guidelines for contributing to the repository. These are guidelines, not hard rules. Good Bug Reports \u00b6 Please be aware of the following things when filing bug reports. Don't open duplicate issues. Please search your issue to see if it has been asked already. Duplicate issues will be closed. When filing a bug about exceptions or tracebacks, please include the complete traceback. Without the complete traceback the issue might be unsolvable and you will be asked to provide more information. Make sure to provide enough information to make the issue workable. The issue template will generally walk you through the process but they are enumerated here as well: A summary of your bug report. This is generally a quick sentence or two to describe the issue in human terms. Guidance on how to reproduce the issue . Ideally, this should have a small code sample that allows us to run and see the issue for ourselves to debug. Please make sure that the token is not displayed . If you cannot provide a code snippet, then let us know what the steps were, how often it happens, etc. Tell us what you expected to happen . That way we can meet that expectation. Tell us what actually happens . What ends up happening in reality? It's not helpful to say \"it fails\" or \"it doesn't work\". Say how it failed, do you get an exception? Does it hang? How are the expectations different from reality? Tell us information about your environment . What version of discord.py are you using? How was it installed? What operating system are you running on? These are valuable questions and information that we use. If the bug report is missing this information then it'll take us longer to fix the issue. We will probably ask for clarification, and barring that if no response was given then the issue will be closed. Submitting a Pull Request \u00b6 Submitting a pull request is fairly simple, just make sure it focuses on a single aspect and doesn't manage to have scope creep and it's probably good to go. It would be incredibly lovely if the style is consistent to that found in the project. This project follows PEP-8 guidelines (mostly) with a column limit of 125. Git Commit Guidelines \u00b6 Use present tense (e.g. \"Add feature\" not \"Added feature\") Limit all lines to 72 characters or less. Reference issues or pull requests outside of the first line. Please use the shorthand #123 and not the full URL. Commits regarding the commands extension must be prefixed with [commands] If you do not meet any of these guidelines, don't fret. Chances are they will be fixed upon rebasing but please do try to meet them to remove some of the workload. Git Commit Rules \u00b6 Don't commit anything that is not related to the project. Don't commit anything that you do not have the rights of. If you don't have the rights to something, but still commit it, we will remove it.","title":"Contributing"},{"location":"contributing/#contributing-to-epikcordpy","text":"First off, thanks for taking the time to contribute. It makes the library substantially better. Info The following is a set of guidelines for contributing to the repository. These are guidelines, not hard rules.","title":"Contributing to EpikCord.py"},{"location":"contributing/#good-bug-reports","text":"Please be aware of the following things when filing bug reports. Don't open duplicate issues. Please search your issue to see if it has been asked already. Duplicate issues will be closed. When filing a bug about exceptions or tracebacks, please include the complete traceback. Without the complete traceback the issue might be unsolvable and you will be asked to provide more information. Make sure to provide enough information to make the issue workable. The issue template will generally walk you through the process but they are enumerated here as well: A summary of your bug report. This is generally a quick sentence or two to describe the issue in human terms. Guidance on how to reproduce the issue . Ideally, this should have a small code sample that allows us to run and see the issue for ourselves to debug. Please make sure that the token is not displayed . If you cannot provide a code snippet, then let us know what the steps were, how often it happens, etc. Tell us what you expected to happen . That way we can meet that expectation. Tell us what actually happens . What ends up happening in reality? It's not helpful to say \"it fails\" or \"it doesn't work\". Say how it failed, do you get an exception? Does it hang? How are the expectations different from reality? Tell us information about your environment . What version of discord.py are you using? How was it installed? What operating system are you running on? These are valuable questions and information that we use. If the bug report is missing this information then it'll take us longer to fix the issue. We will probably ask for clarification, and barring that if no response was given then the issue will be closed.","title":"Good Bug Reports"},{"location":"contributing/#submitting-a-pull-request","text":"Submitting a pull request is fairly simple, just make sure it focuses on a single aspect and doesn't manage to have scope creep and it's probably good to go. It would be incredibly lovely if the style is consistent to that found in the project. This project follows PEP-8 guidelines (mostly) with a column limit of 125.","title":"Submitting a Pull Request"},{"location":"contributing/#git-commit-guidelines","text":"Use present tense (e.g. \"Add feature\" not \"Added feature\") Limit all lines to 72 characters or less. Reference issues or pull requests outside of the first line. Please use the shorthand #123 and not the full URL. Commits regarding the commands extension must be prefixed with [commands] If you do not meet any of these guidelines, don't fret. Chances are they will be fixed upon rebasing but please do try to meet them to remove some of the workload.","title":"Git Commit Guidelines"},{"location":"contributing/#git-commit-rules","text":"Don't commit anything that is not related to the project. Don't commit anything that you do not have the rights of. If you don't have the rights to something, but still commit it, we will remove it.","title":"Git Commit Rules"},{"location":"faq/","text":"FAQ \u00b6 Why Epikcord.py? \u00b6 Epikcord.py is an project that is growing to be an API wrapper for the Discord API, which allows you to make Discord Bots. Currently it is progressing to be an API wrapper. I found a bug! \u00b6 Great! You can report the bug inside our discord server or you can send it our issue tracker here . You know how to fix the bug? Then you can contribute and fix the bug for us! How can I contriubte \u00b6 You can contribute by these steps: Create a fork of the repo Edit and make changes Open a pull request Info If you don't understand, read more here","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#why-epikcordpy","text":"Epikcord.py is an project that is growing to be an API wrapper for the Discord API, which allows you to make Discord Bots. Currently it is progressing to be an API wrapper.","title":"Why Epikcord.py?"},{"location":"faq/#i-found-a-bug","text":"Great! You can report the bug inside our discord server or you can send it our issue tracker here . You know how to fix the bug? Then you can contribute and fix the bug for us!","title":"I found a bug!"},{"location":"faq/#how-can-i-contriubte","text":"You can contribute by these steps: Create a fork of the repo Edit and make changes Open a pull request Info If you don't understand, read more here","title":"How can I contriubte"},{"location":"gettingstarted/creatingbot/","text":"Creating your first bot \u00b6 Creating the bot \u00b6 Just like how you needed to sign up to Discord to get started, we need to get your bot signed up too. To do this, Go to the Discord Developer Portal and click on New Application. Give your bot a name, and click Create Now, you should see a page like this. Click on Bot tab on the left side of the screen. Add intents too You can give it a name, change the Avatar, etc. Inviting the bot \u00b6 Now, lets get the bot added to some servers. Go to the OAuth2 tab in the left pane, and select bot and applications.commands as the scope. The applications.command s scope allows the bot to use Slash Commands, which you may want to have. Next, we choose what permissions the bot will have. You can select them. For now, lets give your bot the Administrator permission, meaning the bot will have all the permissions. Once you select the permissions, click on copy to get the bot invite link. You can use this link to invite the bot. Tokens \u00b6 Now that we have an account for our bot, we need to login. In order to login, we need the bot's password. All users and bots have a \"token\". You may think of a token as a unique password, since this is what we use to log into the bot and connect it to Discord. Tokens are \"snowflakes\". Not actual snowflakes, though. Just like how no two snowflakes in real life have the same pattern, a snowflake in computers is a unique thing - no two bots have the same token - so a token is a snowflake. An ID is a snowflake. Now, lets get our bot's token. To do this, Go back to the Bot tab. Click on the Copy button in the \"Token\" section. Now, you have your bot's token copied to your clipboard. Danger Never leak your bot's token, and never share it with anyone. Even if you get any DMs and someone tells you to do so, maybe claiming to be Discord Staff, do not do so. They are probably lying and are scamming you. Anyone with your token will be able to access your bot fully. They will be able to do anything they want with your bot. Never push it to GitHub, or send it with the code. One way to prevent your token from getting leaked is to store it in .env files. Storing the token in an ENV file \u00b6 Storing your bot Token in an ENV File will increase its security, and prevent it from getting leaked. Create a file with the name .env . Just .env , with the dot/period at the start. Define the token in the file, like, 1 TOKEN = [PASTE YOUR TOKEN HERE] for example, 1 TOKEN = yourtoken here Info We don't support bot prefix commands yet. But we are trying our best to implement this Coding the Basics \u00b6 Here is a basic bot: Install this before running the code 1 pip3 install python - dotenv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \"\"\" Before you implement this in your bot, please note that its just for testing, If you have a test bot and are professional with your code, you can experiment with different features and report the bugs in an issue \"\"\" import os from dotenv import load_dotenv from EpikCord import Client load_dotenv () intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content # Intents().all if you want all client : Client = Client ( os . getenv ( \"TOKEN\" ), intents ) @client . event async def ready (): print ( \"Ready!\" ) client . login () Message events \u00b6 You must have message intents for this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \"\"\" Before you implement this in your bot, please note that its just for testing, If you have a test bot and are professional with your code, you can experiment with different features and report the bugs in an issue \"\"\" from EpikCord import Client , Intents , Messageable intents = Intents () . guilds . guild_members . guild_messages . direct_messages client = Client ( \"your_token\" , intents ) @client . event async def message_create ( message ): if message . author . id == client . user . id : return if message . content == \"example test\" : message . channel = Messageable ( client , message . channel_id ) await message . channel . send ( content = \"hello, chat testing\" ) client . login () Embeds \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \"\"\" Before you implement this in your bot, please note that its just for testing, If you have a test bot and are professional with your code, you can experiment with different features and report the bugs in an issue \"\"\" from EpikCord import Client , Intents , Messageable , Embed intents = Intents () . guilds . guild_members . guild_messages . direct_messages client = Client ( \"your_token\" , intents ) @client . event async def message_create ( message ): if message . author . id == client . user . id : return if message . content == \"embed\" : message . channel = Messageable ( client , message . channel_id ) embed = Embed ( title = \"This is a embed\" , description = \"This a description\" ) embed . add_field ( name = \"This is a \" , value = \"field\" ) await message . channel . send ( embeds = [ embed ]) client . login () So you learned the basics of creating of the basic bot! Happy Coding","title":"Creating your first bot"},{"location":"gettingstarted/creatingbot/#creating-your-first-bot","text":"","title":"Creating your first bot"},{"location":"gettingstarted/creatingbot/#creating-the-bot","text":"Just like how you needed to sign up to Discord to get started, we need to get your bot signed up too. To do this, Go to the Discord Developer Portal and click on New Application. Give your bot a name, and click Create Now, you should see a page like this. Click on Bot tab on the left side of the screen. Add intents too You can give it a name, change the Avatar, etc.","title":"Creating the bot"},{"location":"gettingstarted/creatingbot/#inviting-the-bot","text":"Now, lets get the bot added to some servers. Go to the OAuth2 tab in the left pane, and select bot and applications.commands as the scope. The applications.command s scope allows the bot to use Slash Commands, which you may want to have. Next, we choose what permissions the bot will have. You can select them. For now, lets give your bot the Administrator permission, meaning the bot will have all the permissions. Once you select the permissions, click on copy to get the bot invite link. You can use this link to invite the bot.","title":"Inviting the bot"},{"location":"gettingstarted/creatingbot/#tokens","text":"Now that we have an account for our bot, we need to login. In order to login, we need the bot's password. All users and bots have a \"token\". You may think of a token as a unique password, since this is what we use to log into the bot and connect it to Discord. Tokens are \"snowflakes\". Not actual snowflakes, though. Just like how no two snowflakes in real life have the same pattern, a snowflake in computers is a unique thing - no two bots have the same token - so a token is a snowflake. An ID is a snowflake. Now, lets get our bot's token. To do this, Go back to the Bot tab. Click on the Copy button in the \"Token\" section. Now, you have your bot's token copied to your clipboard. Danger Never leak your bot's token, and never share it with anyone. Even if you get any DMs and someone tells you to do so, maybe claiming to be Discord Staff, do not do so. They are probably lying and are scamming you. Anyone with your token will be able to access your bot fully. They will be able to do anything they want with your bot. Never push it to GitHub, or send it with the code. One way to prevent your token from getting leaked is to store it in .env files.","title":"Tokens"},{"location":"gettingstarted/creatingbot/#storing-the-token-in-an-env-file","text":"Storing your bot Token in an ENV File will increase its security, and prevent it from getting leaked. Create a file with the name .env . Just .env , with the dot/period at the start. Define the token in the file, like, 1 TOKEN = [PASTE YOUR TOKEN HERE] for example, 1 TOKEN = yourtoken here Info We don't support bot prefix commands yet. But we are trying our best to implement this","title":"Storing the token in an ENV file"},{"location":"gettingstarted/creatingbot/#coding-the-basics","text":"Here is a basic bot: Install this before running the code 1 pip3 install python - dotenv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \"\"\" Before you implement this in your bot, please note that its just for testing, If you have a test bot and are professional with your code, you can experiment with different features and report the bugs in an issue \"\"\" import os from dotenv import load_dotenv from EpikCord import Client load_dotenv () intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content # Intents().all if you want all client : Client = Client ( os . getenv ( \"TOKEN\" ), intents ) @client . event async def ready (): print ( \"Ready!\" ) client . login ()","title":"Coding the Basics"},{"location":"gettingstarted/creatingbot/#message-events","text":"You must have message intents for this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \"\"\" Before you implement this in your bot, please note that its just for testing, If you have a test bot and are professional with your code, you can experiment with different features and report the bugs in an issue \"\"\" from EpikCord import Client , Intents , Messageable intents = Intents () . guilds . guild_members . guild_messages . direct_messages client = Client ( \"your_token\" , intents ) @client . event async def message_create ( message ): if message . author . id == client . user . id : return if message . content == \"example test\" : message . channel = Messageable ( client , message . channel_id ) await message . channel . send ( content = \"hello, chat testing\" ) client . login ()","title":"Message events"},{"location":"gettingstarted/creatingbot/#embeds","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \"\"\" Before you implement this in your bot, please note that its just for testing, If you have a test bot and are professional with your code, you can experiment with different features and report the bugs in an issue \"\"\" from EpikCord import Client , Intents , Messageable , Embed intents = Intents () . guilds . guild_members . guild_messages . direct_messages client = Client ( \"your_token\" , intents ) @client . event async def message_create ( message ): if message . author . id == client . user . id : return if message . content == \"embed\" : message . channel = Messageable ( client , message . channel_id ) embed = Embed ( title = \"This is a embed\" , description = \"This a description\" ) embed . add_field ( name = \"This is a \" , value = \"field\" ) await message . channel . send ( embeds = [ embed ]) client . login () So you learned the basics of creating of the basic bot! Happy Coding","title":"Embeds"},{"location":"gettingstarted/installing/","text":"Installing \u00b6 Stable Version \u00b6 Windows \u00b6 1 py - 3 - m pip install - U Epikcord . py MacOS/Linux \u00b6 1 2 # Linux/macOS python3 - m pip install - U \"Epikcord.py\" Updating \u00b6 1 pip install Epikcord . py -- upgrade Development Version \u00b6 Warning This is not a stable version, things will work not expectedly as you thought 1 python - m pip install - U git + https : // github . com / Epikcord / Epikcord . py Repl.it \u00b6 Warning Repl.it is not a good IDE. Its online, its free, but you should definitely not use it to host your bot, its not made for that purpose. Your bot will get slower as it gets bigger, and certain files might be deleted. Create a file and name it .replit . Next, you need to insert the following into the file. 1 2 3 4 5 6 7 8 language=\"python3\" run = \"\"\" pip install epikcord.py python yourmainfilename.py \"\"\" [packager] ignoredPackages=[\"discord.py\", \"discord\"]","title":"Installing"},{"location":"gettingstarted/installing/#installing","text":"","title":"Installing"},{"location":"gettingstarted/installing/#stable-version","text":"","title":"Stable Version"},{"location":"gettingstarted/installing/#windows","text":"1 py - 3 - m pip install - U Epikcord . py","title":" Windows"},{"location":"gettingstarted/installing/#macoslinux","text":"1 2 # Linux/macOS python3 - m pip install - U \"Epikcord.py\"","title":"  MacOS/Linux"},{"location":"gettingstarted/installing/#updating","text":"1 pip install Epikcord . py -- upgrade","title":"Updating"},{"location":"gettingstarted/installing/#development-version","text":"Warning This is not a stable version, things will work not expectedly as you thought 1 python - m pip install - U git + https : // github . com / Epikcord / Epikcord . py","title":"Development Version"},{"location":"gettingstarted/installing/#replit","text":"Warning Repl.it is not a good IDE. Its online, its free, but you should definitely not use it to host your bot, its not made for that purpose. Your bot will get slower as it gets bigger, and certain files might be deleted. Create a file and name it .replit . Next, you need to insert the following into the file. 1 2 3 4 5 6 7 8 language=\"python3\" run = \"\"\" pip install epikcord.py python yourmainfilename.py \"\"\" [packager] ignoredPackages=[\"discord.py\", \"discord\"]","title":"Repl.it"},{"location":"gettingstarted/sections/","text":"Sections \u00b6 A section is a like a cog in discord.py, it is a part of the bot split up. You would use this for commands and events. An example would be fun.py, where you put fun commands in it. Info This is supported but is unstable This page will not be written until the library has a stable version of sections","title":"Sections"},{"location":"gettingstarted/sections/#sections","text":"A section is a like a cog in discord.py, it is a part of the bot split up. You would use this for commands and events. An example would be fun.py, where you put fun commands in it. Info This is supported but is unstable This page will not be written until the library has a stable version of sections","title":"Sections"},{"location":"guides/buttons/","text":"Buttons \u00b6 Buttons are interaction box that is under a message Creating a simple button \u00b6 Warning Currently we can only support one callback on all buttons 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from EpikCord import Client , Intents intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . event async def message_create ( message ): if message . author . id == client . user . id : return if message . content == \"button\" : message . channel = Messageable ( client , message . channel_id ) actionrow = ActionRow () . add_components ( MessageSelectMenu ( custom_id = \"select_menu\" ) actionrow . add_options ( MessageSelectMenuOption ( \"label\" , \"value\" ))) await message . channel . send ( content = \"Anything\" , components = [ actionrow ]) @client . event async def interaction_create ( interaction ): # Events can be `on_FOO_BAR` if interaction . is_message_component (): await interaction . reply ( content = \"Anything\" )","title":"Buttons"},{"location":"guides/buttons/#buttons","text":"Buttons are interaction box that is under a message","title":"Buttons"},{"location":"guides/buttons/#creating-a-simple-button","text":"Warning Currently we can only support one callback on all buttons 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 from EpikCord import Client , Intents intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . event async def message_create ( message ): if message . author . id == client . user . id : return if message . content == \"button\" : message . channel = Messageable ( client , message . channel_id ) actionrow = ActionRow () . add_components ( MessageSelectMenu ( custom_id = \"select_menu\" ) actionrow . add_options ( MessageSelectMenuOption ( \"label\" , \"value\" ))) await message . channel . send ( content = \"Anything\" , components = [ actionrow ]) @client . event async def interaction_create ( interaction ): # Events can be `on_FOO_BAR` if interaction . is_message_component (): await interaction . reply ( content = \"Anything\" )","title":"Creating a simple button"},{"location":"guides/messagecommands/","text":"Message commands \u00b6 Creating Message Commands \u00b6 Similar to user commands, but is a global user command 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from EpikCord import Client , Intents intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . message_command ( \"test\" ) async def test ( interaction ): await interaction . reply ( content = \"Seems like a message to me.\" ) client . login ()","title":"Message commands"},{"location":"guides/messagecommands/#message-commands","text":"","title":"Message commands"},{"location":"guides/messagecommands/#creating-message-commands","text":"Similar to user commands, but is a global user command 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from EpikCord import Client , Intents intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . message_command ( \"test\" ) async def test ( interaction ): await interaction . reply ( content = \"Seems like a message to me.\" ) client . login ()","title":"Creating Message Commands"},{"location":"guides/slashcommands/","text":"Slash Commands \u00b6 This page will show you how to use Slash Commands with EpikCord.py. Important To create commands in a guild, your app must be authorized with the applications.commands scope. In order to make commands work within a guild, the guild must authorize your application with the applications.commands scope. The bot scope is not enough. Supported Option Types Name Value Note INTEGER int Any integer between -2^53 and 2^53 BOOLEAN bool USER discord.Member CHANNEL discord.abc.GuildChannel Includes all channel types + categories ROLE discord.Role MENTIONABLE discord.abc.Mentionable Includes users and roles NUMBER float Any double between -2^53 and 2^53 Creating a slash command \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import asyncio import datetime import time from EpikCord import Client , Intents , StringOption , NumberOption intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . command ( name = \"ping\" , description = \"A test command\" , guild_ids = [ \"937364424208039957\" ] ) async def ping ( interaction ): start = time . perf_counter () await interaction . reply ( content = f \"Pong!\" ) end = time . perf_counter () asyncio . sleep ( 0.5 ) trip = end - start rt_ping = f ' { ( trip * 1000 ) : .2f } ms ( { humanize . precisedelta ( datetime . timedelta ( seconds = trip )) } )' await interaction . edit_original_message ( content = f \"Pong! { rt_ping } \" ) client . login ()","title":"Slash commands"},{"location":"guides/slashcommands/#slash-commands","text":"This page will show you how to use Slash Commands with EpikCord.py. Important To create commands in a guild, your app must be authorized with the applications.commands scope. In order to make commands work within a guild, the guild must authorize your application with the applications.commands scope. The bot scope is not enough. Supported Option Types Name Value Note INTEGER int Any integer between -2^53 and 2^53 BOOLEAN bool USER discord.Member CHANNEL discord.abc.GuildChannel Includes all channel types + categories ROLE discord.Role MENTIONABLE discord.abc.Mentionable Includes users and roles NUMBER float Any double between -2^53 and 2^53","title":"Slash Commands"},{"location":"guides/slashcommands/#creating-a-slash-command","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import asyncio import datetime import time from EpikCord import Client , Intents , StringOption , NumberOption intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . command ( name = \"ping\" , description = \"A test command\" , guild_ids = [ \"937364424208039957\" ] ) async def ping ( interaction ): start = time . perf_counter () await interaction . reply ( content = f \"Pong!\" ) end = time . perf_counter () asyncio . sleep ( 0.5 ) trip = end - start rt_ping = f ' { ( trip * 1000 ) : .2f } ms ( { humanize . precisedelta ( datetime . timedelta ( seconds = trip )) } )' await interaction . edit_original_message ( content = f \"Pong! { rt_ping } \" ) client . login ()","title":"Creating a slash command"},{"location":"guides/usercommands/","text":"Context Menu Commands \u00b6 What are User Commands and Message Commands? \u00b6 When you right click a message, you may see a option called \"Apps\". Hover over it and you can see commands a bot can run with that message. These are called message commands. When you right click a message in the user list, you can once again see an option called \"Apps\". Hover over it and you can see commands a bot can run with that message. These are called user commands. Creating User Commands \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from EpikCord import Client , Intents intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . user_command ( \"mention\" ) async def mention ( interaction ): await interaction . reply ( content = \"Lol I'm not pinging them.\" ) client . login () Tip If you want to make the command global, remove guild_ids. Note that global application commands can take up to an hour to register.","title":"User commands"},{"location":"guides/usercommands/#context-menu-commands","text":"","title":"Context Menu Commands"},{"location":"guides/usercommands/#what-are-user-commands-and-message-commands","text":"When you right click a message, you may see a option called \"Apps\". Hover over it and you can see commands a bot can run with that message. These are called message commands. When you right click a message in the user list, you can once again see an option called \"Apps\". Hover over it and you can see commands a bot can run with that message. These are called user commands.","title":"What are User Commands and Message Commands?"},{"location":"guides/usercommands/#creating-user-commands","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from EpikCord import Client , Intents intents = Intents () . guilds . guild_members . guild_messages . direct_messages . message_content client : Client = Client ( \"token\" , intents ) @client . event async def ready (): print ( \"Ready!\" ) @client . user_command ( \"mention\" ) async def mention ( interaction ): await interaction . reply ( content = \"Lol I'm not pinging them.\" ) client . login () Tip If you want to make the command global, remove guild_ids. Note that global application commands can take up to an hour to register.","title":"Creating User Commands"},{"location":"others/git/","text":"Git \u00b6 Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems). Windows \u00b6 Visit https://gitforwindows.org/ or https://git-scm.com/download/windows Linux \u00b6 Visit https://git-scm.com/download/linux (it's extremely likely in your distros repository) Mac \u00b6 Visit https://git-scm.com/download/mac (it's in brew) Others \u00b6 Choco Package Manager \u00b6 If you use choco package manager, use: choco install git Scoop \u00b6 If you use scoop, use: scoop install git","title":"Installing git"},{"location":"others/git/#git","text":"Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).","title":" Git"},{"location":"others/git/#windows","text":"Visit https://gitforwindows.org/ or https://git-scm.com/download/windows","title":" Windows"},{"location":"others/git/#linux","text":"Visit https://git-scm.com/download/linux (it's extremely likely in your distros repository)","title":" Linux"},{"location":"others/git/#mac","text":"Visit https://git-scm.com/download/mac (it's in brew)","title":" Mac"},{"location":"others/git/#others","text":"","title":"Others"},{"location":"others/git/#choco-package-manager","text":"If you use choco package manager, use: choco install git","title":"Choco Package Manager"},{"location":"others/git/#scoop","text":"If you use scoop, use: scoop install git","title":"Scoop"}]}